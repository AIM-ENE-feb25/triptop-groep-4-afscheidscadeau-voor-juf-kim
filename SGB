# INHOUDSOPGAVE

- [Context Diagram](#context-diagram)
- [Container diagram](#container-diagram)
- [ADR - Database Selectie voor project TripTop](#adr---database-selectie-voor-project-triptop)
- [ADR 2 - Ontwerp voor integratie van verschillende boeking services](#adr-2---ontwerp-voor-integratie-van-verschillende-boeking-services)

## Context Diagram

A diagram of a tripod

*AI-generated content may be incorrect.*

## Container diagram

A diagram of a company

*AI-generated content may be incorrect.*

## ADR - Database Selectie voor project TripTop

**Datum:** 2025-03-21

**Status:** PROPOSED

### Context

Voor het TripTop-project moeten we een database kiezen die voldoet aan onze eisen op het gebied van consistentie, schaalbaarheid, flexibiliteit, query-ondersteuning en onderhoud.

### Overwogen opties

| Criteria                          | PostgreSQL | MongoDB | CouchDB | Neo4J |
|-----------------------------------|------------|---------|---------|-------|
| Data Consistentie en Integriteit  | ++         | 0       | 0       | +     |
| Schaalbaarheid en Prestaties      | 0          | +       | -       | +     |
| Flexibiliteit in Data Modellering | 0          | +       | +       | ++    |
| Ondersteuning voor Complexe Query's | ++         | +       | -       | +     |
| Onderhoud en Beheer               | ++         | ++      | +       | +     |
| Leercurve                         | +          | +       | -       | -     |

### Beslissing

In ons architectuurbesluit hebben we gekozen voor PostgreSQL als databasesysteem voor het TripTop-project, gebaseerd op de volgende belangrijke categorieën:

#### Data Consistentie en Integriteit

Voor een reisboekingssysteem zoals TripTop is het essentieel dat gegevens nauwkeurig en betrouwbaar zijn. Inconsistente of corrupte data kunnen leiden tot boekingsfouten, dubbele reserveringen of verlies van vertrouwen. PostgreSQL biedt volledige ACID-compliance (Atomicity, Consistency, Isolation, Durability), wat zorgt voor betrouwbare transacties en strikte data-integriteit.

#### Ondersteuning voor Complexe Queries

Het vermogen om complexe queries efficiënt uit te voeren is cruciaal voor TripTop. Dit stelt ons in staat om snel en nauwkeurig reisroutes te plannen, beschikbaarheid te controleren en gepersonaliseerde aanbevelingen te doen. PostgreSQL beschikt over geavanceerde SQL-functies die complexe data-opvraging en -manipulatie mogelijk maken.

#### Onderhoud en Beheer

Een stabiel en goed ondersteund databasesysteem vermindert de operationele complexiteit en draagt bij aan de betrouwbaarheid van de dienst. PostgreSQL heeft een sterke community en biedt uitgebreide tools voor databasebeheer, wat bijdraagt aan eenvoudig onderhoud en snelle probleemoplossing.

### Conclusie

Deze categorieën zijn van cruciaal belang voor het succes van TripTop, omdat ze direct invloed hebben op de betrouwbaarheid, efficiëntie en gebruiksvriendelijkheid van het systeem. Door te kiezen voor PostgreSQL kunnen we een robuuste en schaalbare oplossing bieden die voldoet aan de hoge eisen van een modern reisboekingssysteem.

### Gevolgen

**Voordelen:**
- Goede ondersteuning voor data consistentie en integriteit.
- Uitgebreide mogelijkheden voor complexe queries.
- Groot ecosysteem voor onderhoud en beheer.

**Nadelen:**
- Minder flexibel in data modellering vergeleken met NoSQL-opties.
- Beperkte horizontale schaalbaarheid.

## ADR 2 - Ontwerp voor integratie van verschillende boeking services

**Status:** Proposed

### Ontwerpvraag

Hoe kunnen verschillende boekingsservices (zoals Booking.com en eigen beheer in Triptop) worden geïntegreerd?

### Componenten

- **Accommodatie beheer:** Lijst van accommodaties uit verschillende boekingsservices.
- **Accommodatie controller:** Controller met endpoints voor het ophalen van data over de accommodaties.
- **Accommodatie repo:** Mapped data naar gewenst formaat.
- **Accommodatie service:** Interface voor externe boekingsservices.
- **BookingComService:** Implementatie van accommodatie service.

### Interface

- **Accommodatie adapter:** Methodes: `getAccommodations(location)`, `getDetails(id)`.
- **Accommodatie beheer:** Methodes: `getAccommodations(location)` - retourneert lijst van de verschillende accommodaties, `getDetails(id)` - retourneert informatie over de betreffende accommodatie, `saveAccommodations(list id)`.
- **Accommodatie controller:** Methodes: `getAccommodaties(locatie)`, `getDetails(id)`.

### Volgorde

1. **AccommodatieController**
2. **beheer:** vraag om alle resultaten van
3. **de accommodatie services:** in dit geval alleen Booking.com

### Context

What is the issue that we're seeing that is motivating this decision or change?

### Decision

Waarom componenten toevoegen aan component diagram.

### Consequences

Hierdoor wordt het makkelijker voor gebruikers om accommodaties in te zien via de Booking.com API.
